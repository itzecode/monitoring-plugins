#!/usr/bin/perl -w 

# snmpOneFS {{{
# 
#     Date: Dec 14 2019
#   Author: Martin Schmidt (itze@mailbox.org)
#     Help: https://
#  Licence: GPL - http://www.fsf.org/licenses/gpl.txt
#     Note: There is no liability whatsoever for any problems arising from the use of the software.
#
# see help: ./snmpOneFS -h
#
# }}}

use strict;
no warnings;
use Net::SNMP;
use Getopt::Long;
use Number::Format qw(:subs);

# Variables {{{

my $pluginVersion  = '1.0';  # plugin version
my $hostname       = undef;  # hostname
my $warning        = undef;  # treshhold warning
my $critical       = undef;  # treshhold critical
my $seeHelp        = undef;  # show some help
my $seeVersion     = undef;  # show version
my $verbose        = undef;  # use verbose
my $withPerfData   = undef;  # include performance data
my $snmp_community = undef;  # snmp community
my $snmp_port      = 161;    # snmp port
my $snmp_version   = undef;  # snmp version 2
my $snmp_username  = undef;  # user
my $snmp_password  = undef;  # auth password
my $snmp_authproto = 'md5';  # auth protocol
my $snmp_privproto = 'des';  # priv protocol
my $snmp_privpass  = undef;  # priv password
my $snmp_protocol  = undef;  # v3 protocol list
my $pluginTimeout  = 60;     # seconds until plugin times out
my %ERRORS = ( 'OK' => 0, 'WARNING' => 1, 'CRITICAL' => 2, 'UNKNOWN' => 4 );

# }}}
# OneFS SNMP Values {{{

# The total cluster capacity of the /ifs filesystem
my $ifsTotalBytes     = "1.3.6.1.4.1.12124.1.3.1.0";

# The number of bytes used in the /ifs filesystem
my $ifsUsedBytes      = "1.3.6.1.4.1.12124.1.3.2.0";

# The number of bytes available for use in the /ifs filesystem
my $ifsAvailableBytes = "1.3.6.1.4.1.12124.1.3.3.0";

# The number of free bytes in the /ifs filesystem (including Virtual Hot Spare)
my $ifsFreeBytes      = "1.3.6.1.4.1.12124.1.3.4.0";

# }}}
# Plugin functions {{{

# showVersion {{{

sub showVersion {
  print "$0, version $pluginVersion\n";
}

# }}}
# showUsage {{{

sub showUsage {
    print "Usage: $0 [-v] -H <host> -C <snmp_community> [-2] | (-l login -x passwd [-X pass -L <authp>,<privp>]) [-p <port>] -w <warn level> -c <crit level> [-f] [-t <timeout>] [-V]\n";
}

# }}}
# IsNum {{{
# return true if argument is not a number

sub isnnum {
  my $num = shift;
  if ( $num =~ /^(\d+\.?\d*)|(^\.\d+)$/ ) { return 0 ;}
  return 1;
}

# }}}
# Help {{{

sub help {
  print "\nSNMP Capacity check for DELL EMC Isilon OneFS";
  print "\nVersion $pluginVersion\n";
  print "\nLicensed under GPL, (C)2019 Martin Schmidt\n\n";
  showUsage();
  print <<EOT;
-v, --verboseose
   print extra debugging information 
-h, --help
   print this help message
-H, --hostname=HOST
   name or IP address of host to check
-C, --community=COMMUNITY NAME
   community name for the host's SNMP agent (implies v1 protocol)
-2, --v2c
   Use snmp v2c
-l, --login=LOGIN ; -x, --passwd=PASSWD
   Login and auth password for snmpv3 authentication 
   If no priv password exists, implies AuthNoPriv 
-X, --privpass=PASSWD
   Priv password for snmpv3 (AuthPriv protocol)
-L, --protocols=<authproto>,<privproto>
   <authproto> : Authentication protocol (md5|sha : default md5)
   <privproto> : Priv protocole (des|aes : default des) 
-P, --port=PORT
   SNMP port (Default 161)
-w, --warn=INTEGER
   warning level in percent
-c, --crit=INTEGER
   critical level in percent
-f, --perfparse
   Perfparse compatible output
-t, --timeout=INTEGER
   timeout for SNMP in seconds (Default: 60)
-V, --version
   prints version number
EOT
}

# }}}
# beVerbose {{{

sub beVerbose { 
  my $t=shift; 
  print $t,"\n" if defined($verbose); 
}

# }}}
# checkOptions {{{

sub checkOptions {
  Getopt::Long::Configure ("bundling");
  GetOptions(
    'v'	  => \$verbose,	       'verbose'     => \$verbose,
    'h'   => \$seeHelp,        'help'        => \$seeHelp,
    'H:s' => \$hostname,       'hostname:s'  => \$hostname,
    'p:i' => \$snmp_port,      'port:i'	     => \$snmp_port,
    'C:s' => \$snmp_community, 'community:s' => \$snmp_community,
    'l:s' => \$snmp_username,  'login:s'     => \$snmp_username,
    'x:s' => \$snmp_password,  'passwd:s'    => \$snmp_password,
    'X:s' => \$snmp_privpass,  'privpass:s'  => \$snmp_privpass,
    'L:s' => \$snmp_protocol,  'protocols:s' => \$snmp_protocol,   
    't:i' => \$pluginTimeout,  'timeout:i'   => \$pluginTimeout,
    'V'   => \$seeVersion,     'version'     => \$seeVersion,
    '2'   => \$snmp_version,   'v2c'         => \$snmp_version,
    'c:s' => \$critical,       'critical:s'  => \$critical,
    'w:s' => \$warning,        'warn:s'      => \$warning,
    'f'   => \$withPerfData,   'perfparse'   => \$withPerfData,
  );
  
  # Check 'pluginTimeout'
  if( defined($pluginTimeout) && ( isnnum($pluginTimeout) || ($pluginTimeout < 2) )) { 
    print "Timeout must be integer and bigger than 1!\n";
    showUsage(); 
    exit $ERRORS{"UNKNOWN"}
  }
  if( !defined($pluginTimeout) ) {
    $pluginTimeout=60; 
  }

  # Show Help
  if( defined($seeHelp) ) {
    help();
    exit $ERRORS{"UNKNOWN"}
  }
  # Show Version
  if( defined($seeVersion) ) { 
    seeVersion(); 
    exit $ERRORS{"UNKNOWN"};
  }
  # Check 'hostname'
  if( !defined($hostname) ) { 
    showUsage(); 
    exit $ERRORS{"UNKNOWN"};
  }
  # Check 'snmp_community'
  if( !defined($snmp_community) ) {
    $snmp_community = 'public';
  }
  # Check warnings and critical
  if( !defined($warning) || !defined($critical) ) { 
    print "put warning and critical info!\n";
    showUsage();
    exit $ERRORS{"UNKNOWN"};
  }

  # Get rid of % sign if someone placed it
  $warning  =~ s/\%//g; 
  $critical =~ s/\%//g;
  # Check that warn > crit
  if( $warning > $critical ) {
    print "warning <= critical!\n";
    showUsage();
    exit $ERRORS{"UNKNOWN"};
  }
}

# }}}

# }}}
# Main {{{

checkOptions();

$SIG{'ALRM'} = sub {
 print "No answer from host\n";
 exit $ERRORS{"UNKNOWN"};
};

# Connect to host {{{

my( $session, $error );
if ( defined($snmp_username) && defined($snmp_password)) {
  # SNMPv3 login
  beVerbose("SNMPv3 login");
    if (!defined ($snmp_privpass)) {
  beVerbose("SNMPv3 AuthNoPriv login : $snmp_username, $snmp_authproto");
    ($session, $error) = Net::SNMP->session(
      -hostname   	=> $hostname,
      -version		=> '3',
      -username		=> $snmp_username,
      -authpassword	=> $snmp_password,
      -authprotocol	=> $snmp_authproto,
      -timeout          => $pluginTimeout
    );  
  } else {
    beVerbose("SNMPv3 AuthPriv login : $snmp_username, $snmp_authproto, $snmp_privproto");
    ($session, $error) = Net::SNMP->session(
      -hostname   	=> $hostname,
      -version		=> '3',
      -username		=> $snmp_username,
      -authpassword	=> $snmp_password,
      -authprotocol	=> $snmp_authproto,
      -privpassword	=> $snmp_privpass,
      -privprotocol  	=> $snmp_privproto,
      -timeout          => $pluginTimeout
    );
  }
} else {
  if (defined ($snmp_version)) {
    # SNMPv2 Login
    beVerbose("SNMP v2c login");
    ($session, $error) = Net::SNMP->session(
      -hostname  => $hostname,
      -version   => 2,
      -community => $snmp_community,
      -port      => $snmp_port,
      -timeout   => $pluginTimeout
    );
  } else {
    # SNMPV1 login
    beVerbose("SNMP v1 login");
    ($session, $error) = Net::SNMP->session(
      -hostname  => $hostname,
      -community => $snmp_community,
      -port      => $snmp_port,
      -timeout   => $pluginTimeout
    );
  }
}
if (!defined($session)) {
   printf("ERROR opening session: %s.\n", $error);
   exit $ERRORS{"UNKNOWN"};
}

my $exit_val=undef;

# }}}
# Get Values from DELL EMC Isilon OneFS via SNMP {{{

beVerbose("getting values");

my @oidlists = ($ifsAvailableBytes, $ifsFreeBytes);
my $resultat = (Net::SNMP->VERSION < 2) ? $session->get_request(@oidlists) : $session->get_request(-varbindlist => \@oidlists);
if (!defined($resultat)) {
  printf("ERROR: Description table: %s.\n", $session->error);
  $session->close;
  exit $ERRORS{"UNKNOWN"};
}
$session->close;
if (!defined ($$resultat{$ifsFreeBytes})) {
  print "UNKNOWN: No values returned\n";
  exit $ERRORS{"UNKNOWN"};
}
my @ifsValue = undef;
$ifsValue[0]=$$resultat{$ifsAvailableBytes};
$ifsValue[1]=$$resultat{$ifsFreeBytes};

print "OneFS ";

$exit_val=$ERRORS{"OK"};

if( $ifsValue[1] > $warning ) {
  print "WARNING: ";
  $exit_val=$ERRORS{"WARNING"};
}
elsif( $ifsValue[2] > $critical ) {
  print "CRITICAL: ";
  $exit_val=$ERRORS{"CRITICAL"};
}
else {
  print "OK: ";
  $exit_val=$ERRORS{"OK"};
}
print format_bytes($ifsValue[1]) ." of ". format_bytes($ifsValue[0]) ." used";
if (defined($withPerfData)) {
  print " | ifsAvailable=$ifsValue[0] ifsFree=$ifsValue[1];$warning;$critical\n";
} else {
  print "\n";
}

exit $exit_val;

# }}}
